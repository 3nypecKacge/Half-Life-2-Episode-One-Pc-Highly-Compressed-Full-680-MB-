<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>Chameleon Test Page</title>
	<script type="text/javascript" src="sha1.js"></script>
</head>
<body>
	<h1>Chameleon Test Page</h1>

	<h3>Referer Test</h3>
	<a href="/headers" id="refTest">Test referer</a>
	
	<h3>WebRTC Test</h3>
	<h5>WebRTC Connection</h5>
	<p id="webrtcStatus"></p>
	
	<h3>WebSocket Test</h3>
	<h5>WebSocket Connection</h5>
	<p id="wsStatus">CLOSED</p>
	<h5>WebSocket Connection (3rd Party)</h5>
	<p id="wsStatus3rdParty">CLOSED</p>

	<h3>Fingerprint using DynamicsCompressor (sum of buffer values):</h3>
	<p id="pxi_result"></p>
	<h3>Fingerprint using DynamicsCompressor (hash of full buffer):</h3>
	<p id="pxi_full_buffer_result"></p>
	<h3>Fingerprint using OscillatorNode:</h3>
	<p id="cc_result"></p>
	<h3>Fingerprint using hybrid of OscillatorNode/DynamicsCompressor method:</h3>
	<p id="hybrid_result"></p>
	
	<script type="text/javascript">
		// webrtc
		(() => {
			document.querySelector('#webrtcStatus').innerText = window.RTCPeerConnection ? 'OK' : 'ERROR';
		})();

		// websocket
		(() => {
			let socket = new WebSocket('ws://chameleon1.test:3000/echo');
			// Connection opened
			socket.addEventListener('open', function (event) {
				document.querySelector('#wsStatus').innerHTML = 'OPEN';
			});

			let socket2 = new WebSocket('ws://chameleon2.test:3000/echo');
			// Connection opened
			socket2.addEventListener('open', function (event) {
				document.querySelector('#wsStatus3rdParty').innerHTML = 'OPEN';
			});
		})();

		// audio context
		// fingerprint testing code from https://audiofingerprint.openwpm.com/
		(() => {
			var cc_output = [];
			var hybrid_output = [];

			function run_cc_fp() {
				var audioCtx = new(window.AudioContext || window.webkitAudioContext),
						oscillator = audioCtx.createOscillator(),
						analyser = audioCtx.createAnalyser(),
						gain = audioCtx.createGain(),
						scriptProcessor = audioCtx.createScriptProcessor(4096, 1, 1);


				gain.gain.value = 0; // Disable volume
				oscillator.type = "triangle"; // Set oscillator to output triangle wave
				oscillator.connect(analyser); // Connect oscillator output to analyser input
				analyser.connect(scriptProcessor); // Connect analyser output to scriptProcessor input
				scriptProcessor.connect(gain); // Connect scriptProcessor output to gain input
				gain.connect(audioCtx.destination); // Connect gain output to audiocontext destination

				scriptProcessor.onaudioprocess = function (bins) {
					bins = new Float32Array(analyser.frequencyBinCount);
					analyser.getFloatFrequencyData(bins);
					for (var i = 0; i < bins.length; i = i + 1) {
							cc_output.push(bins[i]);
					}
					analyser.disconnect();
					scriptProcessor.disconnect();
					gain.disconnect();
					document.getElementById('cc_result').innerHTML = cc_output.slice(0, 30);
				};

				oscillator.start(0);
			}

			function run_hybrid_fp() {
				var audioCtx = new(window.AudioContext || window.webkitAudioContext),
						oscillator = audioCtx.createOscillator(),
						analyser = audioCtx.createAnalyser(),
						gain = audioCtx.createGain(),
						scriptProcessor = audioCtx.createScriptProcessor(4096, 1, 1);

				// Create and configure compressor
				compressor = audioCtx.createDynamicsCompressor();
				compressor.threshold && (compressor.threshold.value = -50);
				compressor.knee && (compressor.knee.value = 40);
				compressor.ratio && (compressor.ratio.value = 12);
				compressor.reduction && (compressor.reduction.value = -20);
				compressor.attack && (compressor.attack.value = 0);
				compressor.release && (compressor.release.value = .25);

				gain.gain.value = 0; // Disable volume
				oscillator.type = "triangle"; // Set oscillator to output triangle wave
				oscillator.connect(compressor); // Connect oscillator output to dynamic compressor
				compressor.connect(analyser); // Connect compressor to analyser
				analyser.connect(scriptProcessor); // Connect analyser output to scriptProcessor input
				scriptProcessor.connect(gain); // Connect scriptProcessor output to gain input
				gain.connect(audioCtx.destination); // Connect gain output to audiocontext destination

				scriptProcessor.onaudioprocess = function (bins) {
					bins = new Float32Array(analyser.frequencyBinCount);
					analyser.getFloatFrequencyData(bins);
					for (var i = 0; i < bins.length; i = i + 1) {
							hybrid_output.push(bins[i]);
					}
					analyser.disconnect();
					scriptProcessor.disconnect();
					gain.disconnect();
					document.getElementById('hybrid_result').innerHTML = hybrid_output.slice(0, 30);
				};

				oscillator.start(0);
			}

			function run_pxi_fp() {
				var pxi_output;
				var pxi_full_buffer;
				var pxi_compressor, pxi_oscillator;

				if (context = new(window.OfflineAudioContext || window.webkitOfflineAudioContext)(1, 44100, 44100), !context) {
					pxi_output = 0;
				}

				// Create oscillator
				pxi_oscillator = context.createOscillator();
				pxi_oscillator.type = "triangle";
				pxi_oscillator.frequency.value = 1e4;

				// Create and configure compressor
				pxi_compressor = context.createDynamicsCompressor();
				pxi_compressor.threshold && (pxi_compressor.threshold.value = -50);
				pxi_compressor.knee && (pxi_compressor.knee.value = 40);
				pxi_compressor.ratio && (pxi_compressor.ratio.value = 12);
				pxi_compressor.reduction && (pxi_compressor.reduction.value = -20);
				pxi_compressor.attack && (pxi_compressor.attack.value = 0);
				pxi_compressor.release && (pxi_compressor.release.value = .25);

				// Connect nodes
				pxi_oscillator.connect(pxi_compressor);
				pxi_compressor.connect(context.destination);

				// Start audio processing
				pxi_oscillator.start(0);
				context.startRendering();
				context.oncomplete = function(evnt) {
					pxi_output = 0;
					var sha1 = CryptoJS.algo.SHA1.create();
					for (var i = 0; i < evnt.renderedBuffer.length; i++) {
							sha1.update(evnt.renderedBuffer.getChannelData(0)[i].toString());
					}
					hash = sha1.finalize();
					document.getElementById('pxi_full_buffer_result').innerHTML = hash.toString(CryptoJS.enc.Hex);
					for (var i = 4500; 5e3 > i; i++) {
						pxi_output += Math.abs(evnt.renderedBuffer.getChannelData(0)[i]);
					}
					document.getElementById('pxi_result').innerHTML = pxi_output.toString();
					pxi_compressor.disconnect();
				}
			}

			run_pxi_fp();
			run_cc_fp();
			run_hybrid_fp();
		})();
	</script>
</body>
</html>